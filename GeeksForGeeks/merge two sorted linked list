class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode *merged_list = new ListNode(0), *ptr_list = merged_list;
        while(l1 != NULL && l2 != NULL)
        {
            if (l1->val < l2->val)
            {
                merged_list->next = new ListNode(l1->val);
                cout << merged_list->val << endl;
                merged_list = merged_list->next;
                l1 = l1->next;
            }
            else
            {
                merged_list->next = new ListNode(l2->val);
                cout << merged_list->val << endl;
                merged_list = merged_list->next;
                l2 = l2->next;
            }
        }
        
        while(l1 != NULL)
        {
                merged_list->next = new ListNode(l1->val);
                cout << merged_list->val << endl;
                merged_list = merged_list->next;
                l1 = l1->next;
        }
        while(l2 != NULL)
        {
                merged_list->next = new ListNode(l2->val);
                cout << merged_list->val << endl;
                merged_list = merged_list->next;
                l2 = l2->next;
        }
        return ptr_list->next;
    }
};
